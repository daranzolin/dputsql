x
add_constraint <- function(x, ...) {
  stopifnot(
    "'x' must be of object type 'ddl'" = inherits(x, "ddl")
  )
  
}



v <- glue::glue("INSERT INTO {x} (`{paste(x[['col_names']], collapse = '`, `')}`) VALUES")



scaffold_sqlite <- function(x, if_not_exists, col_names) {
  glue::glue("CREATE TABLE {ifelse(if_not_exists, 'IF NOT EXISTS', '')} {x}")
}

scaffold_fun <- switch(engine,
                       "sqlite" = scaffold_sqlite_create,
                       "msserver" = scaffold_msserver_create,
                       "mysql" = scaffold_mysql_create,
                       "oracle" = scaffold_oracle_create,
                       "postgres" = scaffold_postgres_create)


# make empty list e.g. .yml <- list()
# as_yml <- function(x) {
#  UseMethod("as_yml")
# }

create_table(mtcars) |> 
  add_constraint(pk_)


tn <- deparse(substitute(mtcars))
cc <- sapply(mtcars, class)
h <- glue::glue("CREATE TABLE IF NOT EXISTS `{tn}`")
i <- glue::glue("INSERT INTO {tn} (`{paste(names(cc), collapse = '`, `')}`) VALUES")
r <- split(mtcars, seq_along(1:nrow(mtcars)))
v <- glue::glue(
  "({paste}),"
)

def_constraints <- c(
  "primary_key", 
  "foreign_key", 
  "non_null", 
  "unique_vals", 
  "check_vals",
  "default_vals"
  ) 

z <- list()
z[def_constraints] <- NA
